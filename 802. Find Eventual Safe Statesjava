class Solution {
    List<Integer> lis = new ArrayList<Integer>();
    HashSet<Integer> vis = new HashSet<Integer>();
    HashSet<Integer> safe= new HashSet<Integer>();
    void dfs(int[][] graph, int i){
        // System.out.println(i);
        if(graph[i].length==0){
            lis.add(i);
            safe.add(i);
            vis.add(i);
        }else{
            int cnt=0;
            for(int neigh: graph[i]){
                if(!safe.contains(neigh) && !vis.contains(neigh)){
                    vis.add(neigh);
                    dfs(graph, neigh);
                }
                if(safe.contains(neigh)) cnt++;
            }
            if(graph[i].length==cnt){ 
                safe.add(i);
                lis.add(i);
            }
        }
    }
    public List<Integer> eventualSafeNodes(int[][] graph) {
        for(int i=0; i<graph.length;i++) 
            if(!vis.contains(i)){ 
                vis.add(i);
                dfs(graph,i);
            }
        Collections.sort(lis);
        return lis;
    }
}
